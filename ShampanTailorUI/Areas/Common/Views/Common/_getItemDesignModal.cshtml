@model ShampanExam.Models.QuestionVM.OrderItemDesignVM

@{
    ViewBag.Title = "Order Item Design Entry";
}

<style>
    .k-dropdown-wrap .k-input {
        line-height: 1.6em !important;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 12000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 90%;
        max-width: 900px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    .input-validation-error {
        border-color: red !important;
    }
</style>

<div class="card">
    <div class="card-header p-2">
        @if (Model.Operation.Equals("update", StringComparison.OrdinalIgnoreCase))
        {
            <button type="button" class="button btnSaveDesign sslUpdate">Update</button>
        }
        else
        {
            <div style="display:none;" class="divUpdate">
                <button type="button" class="button btnSaveDesign sslUpdate">Update</button>
            </div>
            <div class="divSave">
                <button class="button btnSaveDesign sslSave" type="button">Save</button>
            </div>
        }
    </div>
</div>

<div class="container-fluid">
    <form id="frmaEntry">
        <div class="card card-secondary">
            <div class="card-header">
                <h3 class="card-title"> Order Item Design Info </h3>
            </div>
            <div class="card-body">
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.OrderMasterId)
                @Html.HiddenFor(model => model.OrderMakingChargeDetailId)
                @Html.HiddenFor(model => model.ItemId)
                @Html.HiddenFor(model => model.ItemDesignCategoryId)

                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.ItemDesignCategoryName)
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.ItemDesignCategoryName, new
                               {
                                   @class = "form-control form-control-sm",
                                   @data_val = "true",
                                   @data_val_required = "ItemDesignCategoryName is required"
                               })
                        </div>
                        <span class="field-validation-error text-danger" data-valmsg-for="ItemDesignCategoryName" data-valmsg-replace="true"></span>
                    </div>

                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.ItemDesignSubCategoryId)
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.ItemDesignSubCategoryId, new
                               {
                                   @class = "form-control form-control-sm",
                                   @data_val = "true",
                                   @data_val_required = "Item Design Sub CategoryI is required"
                               })
                        </div>
                        <span class="field-validation-error text-danger" data-valmsg-for="AddressLine2" data-valmsg-replace="true"></span>

                    </div>



                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.Remarks)
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.Remarks, new
                               {
                                   @class = "form-control form-control-sm",
                                   @data_val = "true",
                                   @data_val_required = "Remarks is required"
                               })
                        </div>
                        <span class="field-validation-error text-danger" data-valmsg-for="Remarks" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div id="customConfirmation" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <h4>Are you sure?</h4>
            <p id="confirmation-message"></p>
            <div class="text-end">
                <button id="confirmYes" class="btn btn-primary">Yes</button>
                <button id="confirmNo" class="btn btn-secondary">No</button>
            </div>
        </div>
    </div>

    <div class="card" style="flex-direction: row; justify-content: space-between; align-items: center;">
        <div class="card-header p-2">
            @if (Model.Operation.Equals("update", StringComparison.OrdinalIgnoreCase))
            {
                <button style="float:left;" type="button" class="button btnSaveDesign sslUpdate">Update</button>
            }
            else
            {
                <div style="display:none;" class="divUpdate">
                    <button type="button" class="button btnSaveDesign sslUpdate">Update</button>
                </div>
                <div class="divSave">
                    <button class="button btnSaveDesign sslSave" type="button">Save</button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {

        $(".btnSaveDesign, .btnUpdateDesign").on("click", function () {
            var getId = $("#Id").val() || 0;
            var status = parseInt(getId) > 0 ? "Update" : "Save";

            showCustomConfirmation(`Do you want to ${status} this data?`, function (result) {
                if (result) {
                    saveOrderItemDesign();
                }
            });
        });

        function showCustomConfirmation(message, callback) {
            $("#confirmation-message").text(message);
            $("#customConfirmation").fadeIn();

            $("#confirmYes").off("click").on("click", function () {
                $("#customConfirmation").fadeOut();
                callback(true);
            });

            $("#confirmNo").off("click").on("click", function () {
                $("#customConfirmation").fadeOut();
                callback(false);
            });
        }

        function saveOrderItemDesign() {
            var orderItemDesignList = [];

            $('#modalData tbody tr').each(function () {
                var row = $(this);
                var obj = {
                    ItemDesignCategoryCode: row.find("td:eq(0)").text().trim(),
                    ItemDesignCategoryName: row.find("td:eq(1)").text().trim(),
                    ItemDesignSubCategoryName: row.find("td:eq(2)").text().trim(),
                    Remarks: row.find("td:eq(3)").text().trim(),
                    ItemId: $("#ItemId").val(),
                    OrderMasterId: $("#OrderMasterId").val(),
                    OrderMakingChargeDetailId: $("#OrderMakingChargeDetailId").val()
                };
                orderItemDesignList.push(obj);
            });

            var model = serializeInputs("itemDesignFrm");
            model.OrderItemDesignList = orderItemDesignList;

            $.ajax({
                url: "/Exams/OrderItemDesign/CreateEdit",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(model),
                success: function (result) {
                    if (result.Status === 200) {
                        ShowNotification(1, result.Message);

                        if (window.designCategoryWindow) {
                            window.designCategoryWindow.close();
                        }

                        $("#ItemDesignGridDataList").data("kendoGrid").dataSource.read();
                    } else {
                        ShowNotification(3, result.Message || "Error occurred.");
                    }
                },
                error: function () {
                    ShowNotification(3, "Query Exception!");
                }
            });
        }

        function openDesignCategoryWindow() {
            if (!window.designCategoryWindow) {
                window.designCategoryWindow = $("#designCategoryWindow").kendoWindow({
                    width: "800px",
                    height: "500px",
                    title: "Select Category",
                    visible: false,
                    modal: true,
                    actions: ["Close"],
                    close: function () {
                        saveOrderItemDesign();
                    }
                }).data("kendoWindow");
            }

            $("#frmaEntry")[0].reset();
            $("#modalData tbody").empty();

            window.designCategoryWindow.center().open();
        }

        window.openDesignCategoryWindow = openDesignCategoryWindow;
    });
</script>



@*<script>
        $(document).ready(function () {

            $(".btnSaveDesign, .btnUpdateDesign").on("click", function () {
                var getId = $("#Id").val() || 0;
                var status = parseInt(getId) > 0 ? "Update" : "Save";

                showCustomConfirmation(`Do you want to ${status} this data?`, function (result) {
                    if (result) {
                        saveOrderItemDesign();
                    }
                });
            });

            function showCustomConfirmation(message, callback) {
                $("#confirmation-message").text(message);
                $("#customConfirmation").fadeIn();

                $("#confirmYes").off("click").on("click", function () {
                    $("#customConfirmation").fadeOut();
                    callback(true);
                });

                $("#confirmNo").off("click").on("click", function () {
                    $("#customConfirmation").fadeOut();
                    callback(false);
                });
            }

            function saveOrderItemDesign() {
                var orderItemDesignList = [];

                $('#modalData tbody tr').each(function () {
                    var row = $(this);
                    var obj = {
                        ItemDesignCategoryCode: row.find("td:eq(0)").text().trim(),
                        ItemDesignCategoryName: row.find("td:eq(1)").text().trim(),
                        ItemDesignSubCategoryName: row.find("td:eq(2)").text().trim(),
                        Remarks: row.find("td:eq(3)").text().trim(),
                        ItemId: $("#ItemId").val(),
                        OrderMasterId: $("#OrderMasterId").val(),
                        OrderMakingChargeDetailId: $("#OrderMakingChargeDetailId").val()
                    };
                    orderItemDesignList.push(obj);
                });

                var model = serializeInputs("itemDesignFrm");
                model.OrderItemDesignList = orderItemDesignList;

                $.ajax({
                    url: "/Exams/OrderItemDesign/CreateEdit",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(model),
                    success: function (result) {
                        if (result.Status === 200) {
                            ShowNotification(1, result.Message);
                            if (window.designCategoryWindow) { window.designCategoryWindow.close(); }
                            $("#ItemDesignGridDataList").data("kendoGrid").dataSource.read();
                        } else {
                            ShowNotification(3, result.Message || "Error occurred.");
                        }
                    },
                    error: function () {
                        ShowNotification(3, "Query Exception!");
                    }
                });
            }
        });
    </script>*@



